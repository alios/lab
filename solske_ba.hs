import Data.List
import qualified Data.Map as M


a = M.fromList $ m [
  ("q8",0.216),
  ("q6_d",0.202),
  ("Branche",0.191),
  ("g4",0.170),
  ("q2_b",0.168),
  ("g1",0.146),
  ("Geschlecht",0.129),
  ("g2",0.129),
  ("q5",0.126),
  ("q6_c",0.113),
  ("q6_e",0.109),
  ("q2_d",0.107),
  ("g5",0.092),
  ("q4c2",0.088),
  ("q4c1",0.083),
  ("q7_a",0.083),
  ("q7_d",0.075),
  ("q7_f",0.071),
  ("q7_c",0.069),
  ("q7_g",0.069),
  ("q4c4",0.066),
  ("q4c10",0.058)
  ]
    
b = M.fromList $ m [
  ("q2_b",0.129),
  ("g1",0.123),
  ("q6_d",0.122),
  ("q8",0.120),
  ("s10",0.120),
  ("g4",0.098),
  ("q2_d",0.098),
  ("q9",0.096),
  ("q4c2",0.091),
  ("g2",0.078),
  ("Geschlecht",0.071),
  ("g5",0.064),
  ("q4c1",0.058),
  ("q7_d",0.058),
  ("q5",0.055)]


c = M.fromList $ m [
  ("q8",0.173),
  ("Branche",0.170),
  ("g1",0.167),
  ("q4c1",0.158),
  ("s10",0.154),
  ("q7_c",0.143),
  ("s6",0.124),
  ("q9",0.115),
  ("q7_d",0.113),
  ("q6_c",0.112),
  ("g5",0.103),
  ("s5",0.102),
  ("g4",0.089),
  ("g2",0.078),
  ("g3",0.075),
  ("q4c8",0.072),
  ("q7_a",0.069),
  ("q2_f",0.068),
  ("q7_f",0.068),
  ("q4c2",0.064),
  ("q4c3",0.064),
  ("s4",0.059),
  ("q2_a",0.057),
  ("q2_e",0.052)]

d = M.fromList $ m [
  ("s8",0.328),
  ("g4",0.308),
  ("q6_d",0.252),
  ("q12",0.249),
  ("q4c1",0.216),
  ("q6_c",0.195),
  ("q8",0.191),
  ("Familienst.",0.160),
  ("g1",0.160),
  ("g5",0.157),
  ("q6_a",0.153),
  ("Branche",0.153),
  ("q7_c",0.150),
  ("q6_e",0.146),
  ("g2",0.141),
  ("q2_a",0.133),
  ("q4c3",0.129),
  ("s5",0.120),
  ("q4c10",0.110),
  ("q4c4",0.099),
  ("q9",0.095),
  ("Geschlecht",0.093),
  ("q7_d",0.093),
  ("q7_a",0.088),
  ("q2_d",0.083),
  ("q4c11",0.083),
  ("q5",0.082),
  ("q4c8",0.081),
  ("q2_b",0.075),
  ("q13",0.074),
  ("q7_f",0.071),
  ("q7_g",0.065),
  ("q2_c",0.062),
  ("q7_e",0.055)]

e = M.fromList $ m [
  ("Familienst.",0.195),
  ("g1",0.187),
  ("g2",0.171),
  ("g4",0.171),
  ("Alter",0.165),
  ("q8",0.158),
  ("q6_d",0.154),
  ("q6_c",0.151),
  ("s5",0.143),
  ("q4c1",0.143),
  ("q6_e2",0.141),
  ("q7_c",0.137),
  ("Branche",0.134),
  ("s6",0.119),
  ("g5",0.115),
  ("Geschlecht",0.105),
  ("q7_e",0.092),
  ("g3",0.086),
  ("q2_e",0.086),
  ("q7_g",0.083),
  ("q4c4",0.082),
  ("q7_d",0.071),
  ("q4c8",0.069),
  ("q4c3",0.066) ]

f = M.fromList $ m [ 
  ("g4",0.356),
  ("s8",0.349),
  ("g1",0.307),
  ("q4c1",0.264),
  ("q6_d",0.259),
  ("g5",0.252),
  ("g2",0.246),
  ("q8",0.212),
  ("q6_c",0.197),
  ("g3",0.191),
  ("q7_c",0.191),
  ("q7_d",0.190),
  ("Branche",0.154),
  ("Alter",0.143),
  ("s10",0.129),
  ("q7_g",0.127),
  ("q4c3",0.124),
  ("q7_f",0.124),
  ("s6",0.123),
  ("q7_e",0.119),
  ("q7_a",0.116),
  ("Familienst.",0.112),
  ("s5",0.112),
  ("q10",0.112),
  ("q9",0.099),
  ("q4c4",0.096),
  ("q2_c",0.091),
  ("q7_b",0.091),
  ("q2_d",0.079),
  ("q5",0.076),
  ("q4c10",0.072),
  ("q2_e",0.057)]

g = M.fromList $ m [
  ("q6_c",0.387),
  ("q6_d",0.362),
  ("q4c1",0.324),
  ("g4",0.300),
  ("g1",0.263),
  ("g2",0.256),
  ("q8",0.255),
  ("g5",0.232),
  ("q7_c",0.226),
  ("q6_a",0.218),
  ("Alter",0.204),
  ("q4c3",0.190),
  ("Familienst.",0.188),
  ("q7_d",0.181),
  ("s5",0.180),
  ("g3",0.170),
  ("q4c4",0.170),
  ("q2_b",0.163),
  ("q2_a",0.151),
  ("q7_g",0.146),
  ("q7_a",0.139),
  ("q7_f",0.137),
  ("q2_d",0.136),
  ("q2_c",0.133),
  ("Geschlecht",0.129),
  ("q7_e",0.124),
  ("q5",0.123),
  ("q4c10",0.122),
  ("q4c2",0.120),
  ("q4c9",0.109)]

m :: [(String, Double) ] -> [(String, Double)] 
m xs = m' (fromInteger.toInteger $  vcount) xs
m' _ [] = []
m' c ((k,v):xs) = (k, v * c)  : m' (c - 1) xs


va = [a,b,c]
vb = [d,e,f]
vc = [g]

alll = [a,b,c] ++ [d,e,f] ++ [g]

un = foldl M.union M.empty alll
  

allvars = map fst $ M.toList un
{-
allvars: 
["Alter","Branche","Familienst.","Geschlecht","g1","g2","g3","g4","g5","q10","q12","q13","q2_a","q2_b","q2_c","q2_d","q2_e","q2_f","q4c1","q4c10","q4c11","q4c2","q4c3","q4c4","q4c8","q4c9","q5","q6_a","q6_c","q6_d","q6_e","q6_e2","q7_a","q7_b","q7_c","q7_d","q7_e","q7_f","q7_g","q8","q9","s10","s4","s5","s6","s8"]
-}

vcount = length allvars
{-
vcount: 46
-}

findv xs k = case (M.lookup xs k) of
  Nothing -> 0.0
  Just v -> v

findvmaps k = ((sum $ map (findv k) va) * fa) +
              ((sum $ map (findv k) vb) * fb) +
              ((sum $ map (findv k) vc) * fc)


-- faktor gruppe 1 (q3_a-c)
fa = 1.0
-- faktor gruppe 2 (q3_d-f)
fb = 1.5
-- faktor fÃ¼r c
fc = 2

allvarvals = sortBy (\(_,a) (_,b) -> compare a b) [ (k, findvmaps k) | k <- allvars]

{-

Ergebniss von allvarvals:

[("s4",1.4749999999999999),("q13",1.887),("q2_f",1.9720000000000002),("q7_b",2.5934999999999997),("q4c11",2.6145),("q4c9",3.706),("q10",3.864),("q2_e",6.0905),("q4c8",7.0245),("q6_e2",7.613999999999999),("q2_c",10.15),("q6_e",11.151),("q4c2",12.41),("q4c10",12.434000000000001),("q9",15.201),("q7_e",15.24),("q5",15.866000000000001),("q2_a",16.008499999999998),("s6",16.0165),("q12",16.0605),("s10",17.7),("q7_f",17.911),("q2_d",19.064999999999998),("q7_a",19.431),("q7_g",20.4765),("Geschlecht",21.762),("q4c4",22.1475),("q6_a",24.394000000000002),("q2_b",24.469),("g3",27.2815),("q4c3",28.626),("Alter",32.161500000000004),("s5",32.492999999999995),("q7_d",36.3895),("Branche",38.7745),("Familienst.",39.799),("s8",46.189499999999995),("q7_c",50.127500000000005),("g5",56.90350000000001),("g2",64.297),("q6_c",75.984),("q8",77.03299999999999),("q4c1",78.5065),("g1",82.9655),("q6_d",89.227),("g4",96.5375)]

-}


allvarvals2 = [(k, nor v) | (k,v) <- allvarvals] 

nor x = (x - xmin) / ( xmax - xmin) 
  where vs = map snd allvarvals 
        xmin = minimum vs
        xmax = maximum vs
          
{-
allvarvals2

[("s4",0.0),("q13",4.333990795529258e-3),("q2_f",5.228139381985539e-3),("q7_b",1.1765943458251148e-2),("q4c11",1.1986850756081528e-2),("q4c9",2.3468770545693622e-2),("q10",2.5130834976988824e-2),("q2_e",4.855226824457594e-2),("q4c8",5.8377383300460224e-2),("q6_e2",6.457856673241288e-2),("q2_c",9.125575279421434e-2),("q6_e",0.10178566732412886),("q4c2",0.11502958579881657),("q4c10",0.1152820512820513),("q9",0.14438921761998685),("q7_e",0.14479947403024326),("q5",0.1513846153846154),("q2_a",0.15288362919132148),("s6",0.15296778435239974),("q12",0.15343063773833007),("s10",0.17067718606180143),("q7_f",0.17289677843523998),("q2_d",0.18503616042077575),("q7_a",0.1888862590401052),("q7_g",0.19988428665351743),("Geschlecht",0.21340696909927678),("q4c4",0.2174621959237344),("q6_a",0.2410940170940171),("q2_b",0.24188297172912557),("g3",0.2714687705456936),("q4c3",0.285612097304405),("Alter",0.32280341880341884),("s5",0.3262905982905982),("q7_d",0.36727942143326753),("Branche",0.3923681788297173),("Familienst.",0.4031452991452991),("s8",0.4703694937541091),("q7_c",0.5117948717948718),("g5",0.5830742932281394),("g2",0.6608494411571334),("q6_c",0.7837896120973044),("q8",0.7948244575936882),("q4c1",0.8103247863247864),("g1",0.8572307692307694),("q6_d",0.9230979618671927),("g4",1.0)]

-}


